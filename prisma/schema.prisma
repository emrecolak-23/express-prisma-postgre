generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://prisma:prisma@127.0.0.1:5432/grading-app"
}

// TODO: define fields and relations
model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  firstname String?
  lastName  String?
  social    Json?

  // Relational Fields
  courses     CourseEnrollment[]
  testResults TestResult[]       @relation(name: "results")
  testsGraded TestResult[]       @relation(name: "graded")
  feedback    CourseFeedback[]
  tokens      Token[]
}

model Token {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  type       TokenType
  emailToken String?   @unique
  valid      Boolean   @default(true)
  expiration DateTime

  // Relation fields
  user   User @relation(fields: [userId], references: [id])
  userId Int
}

enum TokenType {
  EMAIL // used as a short lived token sent to the user's email
  API
}

model Course {
  id             Int                @id @default(autoincrement())
  name           String
  courseDetails  String?
  members        CourseEnrollment[]
  tests          Test[]
  CourseFeedback CourseFeedback[]
}

model CourseFeedback {
  id       Int    @id @default(autoincrement())
  feedback String @db.Text

  studentId Int
  student   User   @relation(fields: [studentId], references: [id])
  courseId  Int
  course    Course @relation(fields: [courseId], references: [id])
}

model CourseEnrollment {
  createdAt DateTime @default(now())
  role      UserRole

  // Relational Fields
  userId   Int
  user     User   @relation(fields: [userId], references: [id])
  courseId Int
  course   Course @relation(fields: [courseId], references: [id])

  @@id([userId, courseId])
  @@index([userId, role])
}

enum UserRole {
  STUDENT
  TEACHER
}

model Test {
  id        Int      @id @default(autoincrement())
  date      DateTime
  updatedAt DateTime @updatedAt
  name      String

  // Relation fields
  courseId    Int
  course      Course       @relation(fields: [courseId], references: [id])
  testResults TestResult[]
}

model TestResult {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  result    Int //Percentage precise to one decimal point represented as result

  // Relation Fields
  studentId Int
  student   User @relation(name: "results", fields: [studentId], references: [id])
  graderId  Int
  graderBy  User @relation(name: "graded", fields: [graderId], references: [id])
  testId    Int
  test      Test @relation(fields: [testId], references: [id])
}
